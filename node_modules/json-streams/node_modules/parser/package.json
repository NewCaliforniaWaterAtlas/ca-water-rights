{
  "name": "parser",
  "description": "A configurable parser to parse whatever you want",
  "version": "0.1.3",
  "homepage": "http://github.com/floby/node-parser",
  "repository": {
    "type": "git",
    "url": "git://github.com/floby/node-parser.git"
  },
  "author": {
    "name": "Florent Jaby",
    "email": "florent.jaby@gmail.com"
  },
  "main": "lib/Parser.js",
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": "0.4-0.9"
  },
  "dependencies": {
    "tokenizer": "*"
  },
  "readme": "# Synopsis\nThis module is basically a class that provides general mechanisms for\nparsing strings. It works with my [tokenizer](http://github.com/floby/node-tokenizer)\nalthough it can be used with pretty much anything emitting tokens the same\nway.\nThe parser works with a queue of functions. For each token the next function\nin the queue is called.\n\n# write you own parser\n\n### tokenizer\nOnly one thing is required for the parser to work : a tokenizer.\nThese concepts are very different and that is why they are implemented\nseparately. The easiest solution is to use my [tokenizer](http://github.com/floby/node-tokenizer)\n\n\n### parser\nThe default behaviour upon receiving a new token is ignoring it. It prints\na warning when reaching EOF with the number of tokens that have been ignored.\nHowever this is probably not what you want to do!\n\nIn order to parse what you need to parse you have to provide the parser\nwith the functions which will be called for each token. Let's call these\nfunctions _'handlers'_.\nThis can be achieved through configuration of the basic parser or\nthrough inheritance.\n    \n``` javascript\nvar Parser = require('parser');\nvar util = require('util');\nvar MyTokenizer = require('./MyTokenizer');\n\nfunction MyParser() {\n    // MyTokenizer is the tokenizer we configured\n    // but it's not the subject of this module\n    Parser.apply(this, new MyTokenizer());\n\n    // override the default behaviour\n    this.defaultHandler(this.default);\n\n    // specify the function that will be called on the first token\n    this.initialHander(this.initial);\n}\nutil.inherits(MyParser, Parser);\n\n/**\n * Of course you will have to define these functions somewhere\n */\n```\n\nThis is very theoretic but you can have a look at what is in the example \nfolder\n\n## Handlers\nHandlers are just javascript functions accepting the following arguments:\n\n* `token` the actual token emitted by the tokenizer\n* `type` the type of this token (i.e. `'number'`, `'whitespace'`, `'word'`)\n* `next` a function to specify what needs to be called on the next token(s)\n\nthe `next` function takes a random number of handlers which will be pushed\nin front of the handlers queue (they will be _next_!).\nreturning `true` from a handler causes the same token to be reemitted\nto the next handler.\n\nThis allows you to define handlers doing some kind of \"sniffing\" if you find\nyourself in a state in which you cannot determine what will come next.\nThis kind of handlers _expand_ themselves to a greater number of handlers that\nwill effectively parse the following tokens. They do that by adding a few handlers\nto the queue with `next` and returning `true` to notify the parser that the token\nshould be reemitted.\n\n### Handlers utilities\nthere are a few handlers factories provided by this module.\n\n* `checkType(type)` returns a handler that only checks the type of the\ntoken without doing anything so the same token is pass down to the next\nhandler\n* `expect(type)` returns a handler that checks for the specified type\nand consumes the token\n* `list(separator, element, end)` returns a handler expanding to the\nhandlers needed to parse a list of elements able to be parsed by `element`\nand separated by tokens of type `separator`. The list should end by a\ntoken of type `end`\n\n# project\n## TODOs\n* more robustness / better error handling\n* features requests\n* Support for asynchronous handlers\n* allow for complex separator an ending tokens for handler utilities\n\n## Features requests / bugs\nIf you'd like the parser to do something that it doesn't do or want to report\na bug please use the github issue tracker on [github](http://github.com/floby/node-parser)\n\n## fork / patches / pull requests\nYou are very welcome to send patches or pull requests\n",
  "_id": "parser@0.1.3",
  "_from": "parser@0.1"
}
