{
  "name": "tokenizer",
  "description": "A wide purpose tokenizer for node.js which looks like a stream",
  "version": "0.1.1",
  "homepage": "http://github.com/floby/node-tokenizer",
  "repository": {
    "type": "git",
    "url": "git://github.com/Floby/node-tokenizer.git"
  },
  "author": {
    "name": "Florent Jaby",
    "email": "florent.jaby@gmail.com"
  },
  "main": "lib/Tokenizer.js",
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": "~0.4 ~0.5 ~0.6 ~0.7 ~0.8 ~0.9"
  },
  "readme": "# Synopsis\nA wide purpose tokenizer for JavaScript. The interface follows more or less\nthe WriteStream from [node.js](http://nodejs.org).\n\nnode-tokenizer is published on npm so you can install it with `npm install tokenizer`\n\n## How to\n\n* require the Tokenizer constructor\n\n``` javascript\nvar Tokenizer = require('tokenizer');\n```\n\n* construct one (we'll see what the callback is used for)\n\n``` javascript\nvar t = new Tokenizer(mycallback);\n``` \n\n* add rules\n\n``` javascript\nt.addRule(/^my regex$/, 'type');\n```\n\n* write or pump to it\n\n``` javascript\nt.write(data);\n// or\nstream.pipe(t);\n```\n\n* listen for new tokens\n\n``` javascript\nt.on('token', function(token, type) {\n    // do something useful\n    // type is the type of the token (specified with addRule)\n    // token is the actual matching string\n})\n// alternatively you can listen on the 'data' event\n```\n\n* look out for the end\n\n``` javascript\nt.on('end', callback);\n```\n\nthe optional callback argument for the constructor is a function that will\nbe called for each token in order to specify a different type by returning\na string. The parameters passed to the function are token(the token that we found)\nand match, an object like this \n\n``` javascript\n{\n    regex: /whatever/ // the regex that matched the token\n    type: 'type' // the type of the token\n}\n```\n\nHave a look in the example folder\n\n## Rules\nrules are regular expressions associated with a type name.\nThe tokenizer tries to find the longest string matching one or more rules.\nWhen several rules match the same string, priority is given to the rule\nwhich was added first. (this may change)\n\nPlease note that your regular expressions should use ^ and $ in order\nto test the whole string. If these are not used, you rule will match _every_\nstring that contains what you specified, this could be the whole file!\n\n## To do\n* a lot of optimisation\n* being able to share rules across several tokenizers\n    (although this can be achieved through inheritance)\n* probably more hooks\n* more checking\n",
  "_id": "tokenizer@0.1.1",
  "_from": "tokenizer@0.1"
}
